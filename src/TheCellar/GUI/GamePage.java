package TheCellar.GUI;

import TheCellar.*;
import TheCellar.AI.AI;
import TheCellar.Charts.BarGraph;
import TheCellar.Charts.LineGraph;
import TheCellar.Charts.PieChart;

import javax.swing.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.Console;
import java.util.ArrayList;
import java.awt.event.KeyEvent;
import java.awt.List;


// window builder class that creates the gui
// was mainly auto generated by eclipse
public class GamePage {
	public static JFrame frame;
	public boolean textListenerEnabled = true;

	public static void showWindow() {


	}

	public GamePage() {
		
		frame = new JFrame();
		frame.setTitle("The Cellar");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setBounds(100, 100, 1061, 628);
		frame.setLocationRelativeTo(null);
		frame.getContentPane().setLayout(null);

		//		JPanel Animation = new Animation();
		//		Animation.setBorder(new CompoundBorder());
		//		Animation.setBackground(new Color(248, 248, 248));
		//		Animation.setBounds(101, 11, 732, 312);
		//		frame.getContentPane().add(Animation);

		JSlider slider = new JSlider();
		slider.setBounds(14, 515, 151, 26);
		frame.getContentPane().add(slider);
		slider.addChangeListener(e -> {
			if (textListenerEnabled) {
				System.out.println("Slider value: " + slider.getValue());

				float percent = (100.0f - slider.getValue()) / 100.0f;
				int min = Main.game.GameSpeedMin;
				int max = Main.game.GameSpeedMax;
				int range = max - min;
				int value = (int) (min + range * percent);

				Main.game.SetGameSpeed(value);
			}
		});

		// set the slider value to the current game speed
		slider.setValue(100-((Main.game.GameSpeed - Main.game.GameSpeedMin) * 100 / (Main.game.GameSpeedMax - Main.game.GameSpeedMin)));

		JLabel timeLabel = new JLabel("Game Speed\r\n");
		timeLabel.setBounds(54, 500, 81, 14);
		frame.getContentPane().add(timeLabel);


		JLabel money = new JLabel("Money: ");
		money.setFont(new Font("SansSerif", Font.ITALIC, 18));
		money.setBounds(815, 8, 100, 38);
		frame.getContentPane().add(money);

		JLabel debt = new JLabel("Debt: ");
		debt.setFont(new Font("SansSerif", Font.ITALIC, 18));
		debt.setBounds(815, 25, 113, 38);
		frame.getContentPane().add(debt);

		JLabel moneyLabel = new JLabel(String.valueOf(Main.game.PlayerBusiness.money));
		moneyLabel.setBackground(new Color(192, 192, 192));
		moneyLabel.setFont(new Font("SansSerif", Font.ITALIC, 18));
		moneyLabel.setBounds(915, 8, 124, 38);
		frame.getContentPane().add(moneyLabel);

		JLabel debtLabel = new JLabel(String.valueOf(Main.game.PlayerBusiness.debt));
		debtLabel.setFont(new Font("SansSerif", Font.ITALIC, 18));
		debtLabel.setBounds(865, 25, 159, 38);
		frame.getContentPane().add(debtLabel);

		PieChart pieChart = new PieChart();
		pieChart.setBounds(174, 53, 218, 140);
		frame.getContentPane().add(pieChart);

		BarGraph steaksPerDayChart = new BarGraph("Steaks Per Day");
		steaksPerDayChart.setBounds(383, 331, 200, 122);
		frame.getContentPane().add(steaksPerDayChart);

		LineGraph lineGraph = new LineGraph("time", "Going Rate");
		lineGraph.setBounds(593, 331, 200, 122);
		frame.getContentPane().add(lineGraph);

		BarGraph barGraph = new BarGraph("value");
		barGraph.setBounds(175, 331, 200, 122);
		frame.getContentPane().add(barGraph);

		BarGraph demandGraph = new BarGraph("Demand");
		demandGraph.setBounds(175, 203, 200, 122);
		frame.getContentPane().add(demandGraph);

		ArrayList<Double> marginValues = new ArrayList<>();
		LineGraph MarginsGraph = new LineGraph("time", "Profit Margins");
		MarginsGraph.setBounds(593, 459, 200, 122);
		frame.getContentPane().add(MarginsGraph);

		ArrayList<Double> expensesValues = new ArrayList<>();
		LineGraph ExpensesGraph = new LineGraph("time", "Expenses");
		ExpensesGraph.setBounds(383, 459, 200, 122);
		frame.getContentPane().add(ExpensesGraph);

		ArrayList<Double> profitValues = new ArrayList<>();
		LineGraph ProfitGraph = new LineGraph("time", "Profit");
		ProfitGraph.setBounds(175, 459, 200, 122);
		frame.getContentPane().add(ProfitGraph);

		ArrayList<Double> customerSentimentValues = new ArrayList<>();
		LineGraph CustomerSentimentGraph = new LineGraph("time", "Customer Sentiment");
		CustomerSentimentGraph.setBounds(383, 203, 200, 122);
		frame.getContentPane().add(CustomerSentimentGraph);

		ArrayList<Double> netWorthOverTime = new ArrayList<>();
		LineGraph MarketValueGraph = new LineGraph("time", "Net Worth");
		MarketValueGraph.setBounds(593, 203, 200, 122);
		frame.getContentPane().add(MarketValueGraph);

		ArrayList<Double> AvgSalePriceValues = new ArrayList<>();
		LineGraph AvgSalePriceGraph = new LineGraph("time", "Average Sale Price");
		AvgSalePriceGraph.setBounds(402, 53, 218, 140);
		frame.getContentPane().add(AvgSalePriceGraph);

		ArrayList<Double> goingRateValues = new ArrayList<>();
		Main.game.addTickListener(new TickListener() {
			@Override
			public void onTick() {
				ArrayList<String> labels = new ArrayList<>();
				ArrayList<Double> netWorthValues = new ArrayList<>();
				ArrayList<Double> steaksPerDay = new ArrayList<>();
				ArrayList<Double> demandValues = new ArrayList<>();

				// add ai businesses
				for (int i = 0; i < Main.game.AIBusinesses.size(); i++) {
					Business b = Main.game.AIBusinesses.get(i);
					labels.add(b.name);

					double netWorth = (double)b.GetNetWorth();

					// make 0 if negative
					if (netWorth < 0) {
						netWorth = 0;
					}

					netWorthValues.add(netWorth);
					steaksPerDay.add((double)b.GetSteaksPerDay());
					demandValues.add(b.GetDemand());
				}

				// add player business
				labels.add(Main.game.PlayerBusiness.name);

				double netWorth = (double)Main.game.PlayerBusiness.GetNetWorth();

				if (netWorth < 0) {
					netWorth = 0;
				}

				netWorthValues.add(netWorth);
				steaksPerDay.add((double)Main.game.PlayerBusiness.GetSteaksPerDay());

				// add player value over times
				goingRateValues.add((double)Main.game.getGoingRate());
				demandValues.add(Main.game.PlayerBusiness.GetDemand());
				netWorthOverTime.add((double)Main.game.PlayerBusiness.GetNetWorth());
				customerSentimentValues.add(Main.game.PlayerBusiness.GetCustomerSatisfaction());
				profitValues.add((double)Main.game.PlayerBusiness.getProfit());
				expensesValues.add((double)Main.game.PlayerBusiness.getExpenses());

				// get mean sale price
				int buisnessCount = 1;
				double totalSalePrice = Main.game.PlayerBusiness.price;
				for (AI ai : Main.game.AIBusinesses) {
					buisnessCount++;
					totalSalePrice += ai.price;
				}
				double avgSalePrice = totalSalePrice / buisnessCount;

				// round to 1 decimal
				avgSalePrice = Math.round(avgSalePrice * 10.0) / 10.0;

				// add to avg sale price values
				AvgSalePriceValues.add(avgSalePrice);

				double marginValue = Main.game.PlayerBusiness.getProfitMargin();
				if (marginValue < 0) {
					marginValue = 0;
				}
				marginValues.add(marginValue);

				// if more than 10 values, remove the first one
				if (goingRateValues.size() > 10) {
					goingRateValues.remove(0);
				}
				if (netWorthOverTime.size() > 10) {
					netWorthOverTime.remove(0);
				}
				if (customerSentimentValues.size() > 10) {
					customerSentimentValues.remove(0);
				}
				if (profitValues.size() > 10) {
					profitValues.remove(0);
				}
				if (expensesValues.size() > 10) {
					expensesValues.remove(0);
				}
				if (marginValues.size() > 10) {
					marginValues.remove(0);
				}
				if (AvgSalePriceValues.size() > 10) {
					AvgSalePriceValues.remove(0);
				}


				// update graphs

				// pie charts
				pieChart.Update(labels, netWorthValues);

				// bar graphs
				steaksPerDayChart.Update(labels, steaksPerDay);
				barGraph.Update(labels, netWorthValues);
				demandGraph.Update(labels, demandValues);

				// line graphs
				lineGraph.Update(goingRateValues);
				MarketValueGraph.Update(netWorthOverTime);
				CustomerSentimentGraph.Update(customerSentimentValues);
				ProfitGraph.Update(profitValues);
				ExpensesGraph.Update(expensesValues);
				MarginsGraph.Update(marginValues);
				AvgSalePriceGraph.Update(AvgSalePriceValues);

				moneyLabel.setText(String.valueOf(Main.game.PlayerBusiness.money));
		        debtLabel.setText(String.valueOf(Main.game.PlayerBusiness.debt));
			}
		});

		JPanel panel_1 = new JPanel();
		panel_1.setBackground(new Color(192, 192, 192));
		panel_1.setBounds(11, 9, 81, 311);
		frame.getContentPane().add(panel_1);
		panel_1.setLayout(null);

		JButton pauseButton = new JButton("Pause");
		pauseButton.setBounds(6, 5, 69, 45);
		panel_1.add(pauseButton);
		pauseButton.setFont(new Font("Arial", Font.BOLD, 12));
		pauseButton.setBackground(new Color(128, 128, 128));
		pauseButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				PauseMenuPage pause = new TheCellar.GUI.PauseMenuPage();	}
		});

		Button bankButton = new Button("Bank");
		bankButton.setBounds(6, 75, 69, 65);
		panel_1.add(bankButton);
		bankButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				TheCellar.GUI.BankPage bank = new BankPage();
				bank.showWindow();
			}
		});
		bankButton.setFont(new Font("SansSerif", Font.BOLD, 18));
		bankButton.setBackground(new Color(248, 242, 22));

		Button shopButton = new Button("Shop");
		shopButton.setBounds(7, 154, 69, 65);
		panel_1.add(shopButton);
		shopButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				TheCellar.GUI.ShopPage shop = new ShopPage();
				shop.showWindow();
			}
		});
		shopButton.setFont(new Font("SansSerif", Font.BOLD, 18));
		shopButton.setBackground(new Color(0, 255, 255));



		Button hireButton = new Button("Hire");
		hireButton.setBounds(6, 236, 69, 65);
		panel_1.add(hireButton);
		hireButton.setFont(new Font("SansSerif", Font.BOLD, 18));
		hireButton.setBackground(new Color(255, 0, 255));
		hireButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				TheCellar.GUI.HirePage chefs = new HirePage();
				chefs.showWindow();	
			}
		});

		JButton setSteakPriceButton = new JButton("Set Steak Price");
		setSteakPriceButton.setBounds(15, 551, 150, 30); 
		frame.getContentPane().add(setSteakPriceButton);
		
		JTextPane InventoryPane = new JTextPane();
		InventoryPane.setEditable(false);
		InventoryPane.setFont(new Font("Tahoma", Font.PLAIN, 11));
		InventoryPane.setText("Stuff\r\nhere\r\noh");
		InventoryPane.setBounds(815, 92, 224, 489);
		frame.getContentPane().add(InventoryPane);


		// add tick listener to update the inventory pane
		Main.game.addTickListener(new TickListener() {
			@Override
			public void onTick() {
				InventoryPane.setText(Main.game.PlayerBusiness.GetInventory());
			}
		});

		setSteakPriceButton.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        // Show an input dialog to get the steak price from the user
		        String userInput = JOptionPane.showInputDialog(frame, "Enter the new steak price:");
		        try {
		            if (userInput != null) {
		                int newPrice = Integer.parseInt(userInput);
		                // Set the price of the steak in the PlayerBusiness
		                Main.game.PlayerBusiness.setPrice(newPrice);
		                
		                // Display a message indicating the new steak price
		                JOptionPane.showMessageDialog(frame, "Steak price changed to: " + newPrice);
		            }
		        } catch (NumberFormatException ex) {
		            // Handle the case where the entered text is not a valid integer
		            JOptionPane.showMessageDialog(frame, "Please enter a valid integer for the price.");
		        }
		    }
		});
		//Animation.requestFocusInWindow();

		frame.setFocusable(true);

		InputMap inputMap = frame.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		ActionMap actionMap = frame.getRootPane().getActionMap();

		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "pauseMenu");
		actionMap.put("pauseMenu", new AbstractAction() {

			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				PauseMenuPage pause = new PauseMenuPage();
				pause.showWindow();
			}
		});


		JLabel DebtWarningLabel = new JLabel("You've been in debt for _ days you will lose in _ days");
		DebtWarningLabel.setForeground(new Color(255, 0, 0));
		DebtWarningLabel.setFont(new Font("Tahoma", Font.BOLD, 15));
		DebtWarningLabel.setBounds(176, 20, 469, 21);
		frame.getContentPane().add(DebtWarningLabel);

		JButton DebtPaymentButton = new JButton("Pay Debt!");
		DebtPaymentButton.setForeground(new Color(255, 0, 0));
		DebtPaymentButton.setFont(new Font("Tahoma", Font.BOLD, 15));
		DebtPaymentButton.setBounds(653, 15, 124, 26);
		frame.getContentPane().add(DebtPaymentButton);
		
		JLabel DaysOfFoodLabel = new JLabel("Days Of Food:");
		DaysOfFoodLabel.setFont(new Font("SansSerif", Font.ITALIC, 18));
		DaysOfFoodLabel.setBounds(815, 46, 151, 38);
		frame.getContentPane().add(DaysOfFoodLabel);
		
		JLabel daysOfFoodValue = new JLabel("0");
		daysOfFoodValue.setFont(new Font("SansSerif", Font.ITALIC, 18));
		daysOfFoodValue.setBackground(Color.LIGHT_GRAY);
		daysOfFoodValue.setBounds(940, 46, 124, 38);
		frame.getContentPane().add(daysOfFoodValue);
		
		List list = new List();
		list.setBounds(626, 53, 167, 104);
		frame.getContentPane().add(list);
		
		JButton SearchOpponentButton = new JButton("Display Info");
		SearchOpponentButton.setFont(new Font("Tahoma", Font.PLAIN, 15));
		SearchOpponentButton.setBounds(626, 163, 167, 30);
		frame.getContentPane().add(SearchOpponentButton);

		SearchOpponentButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// get the selected index
				int index = list.getSelectedIndex();

				// if no index is selected show a message
				if (index == -1) {
					JOptionPane.showMessageDialog(frame, "Please select an opponent");
				} else {
					// get the ai
					AI ai = Main.game.AIBusinesses.get(index);

					Main.game.Pause();
					// show the info
					JOptionPane.showMessageDialog(frame, ai.GetInventory());
					Main.game.Resume();
				}
			}
		});


		// add action listener to the debt payment button
		DebtPaymentButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// pay the debt
				boolean paidOff = Main.game.PlayerBusiness.PayDebt();

				// if not paid off show a message
				if (!paidOff) {
					JOptionPane.showMessageDialog(frame, "You don't have enough money to pay off your debt");
				}
			}
		});

		Main.game.addTickListener(new TickListener() {
			public void onTick() {
				moneyLabel.setText(String.valueOf(Main.game.PlayerBusiness.money));

				// if the player is in debt
				if (Main.game.PlayerBusiness.debt > 0) {
					// show the debt warning label
					DebtWarningLabel.setVisible(true);
					DebtWarningLabel.setText("You've been in debt for " + Main.game.PlayerBusiness.daysInDebt + " days you will lose in " + (Game.MaxDebtDays-Main.game.PlayerBusiness.daysInDebt) + " days");

					// show the debt payment button
					DebtPaymentButton.setVisible(true);

				} else {
					// hide the debt warning label
					DebtWarningLabel.setVisible(false);

					// hide the debt payment button
					DebtPaymentButton.setVisible(false);
				}

				// if the player has lost
				if (Main.game.PlayerBusiness.daysInDebt > Game.MaxDebtDays) {

					// set game over
					Main.game.GameOver();

					// show the game over page
					frame.setVisible(false);
					GameOverPage gameOver = new GameOverPage();

				}

				// update days of food value
				daysOfFoodValue.setText(String.valueOf(Main.game.PlayerBusiness.daysOfFood));

				// if 0 make it red else black
				if (Main.game.PlayerBusiness.daysOfFood == 0) {
					daysOfFoodValue.setForeground(Color.RED);
					DaysOfFoodLabel.setForeground(Color.RED);
				} else {
					daysOfFoodValue.setForeground(Color.BLACK);
					DaysOfFoodLabel.setForeground(Color.BLACK);
				}

				// get current selected opponent
				String selectedOpponent = list.getSelectedItem();

				// add opponent names to list
				list.removeAll();
				for (AI ai : Main.game.AIBusinesses) {
					list.add(ai.name);
				}

				// get list items
				String[] listItems = list.getItems();

				// foreach list item
				for (int i = 0; i < listItems.length; i++) {
					// if the item is the same as the selected opponent
					if (listItems[i].equals(selectedOpponent)) {
						// select it
						list.select(i);
					}
				}
			}
		});

		// on quit ask if they want to save
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
		    @Override
		    public void windowClosing(java.awt.event.WindowEvent windowEvent) {
		    	// show a confirm dialog
		        if (JOptionPane.showConfirmDialog(frame,
		            "Would you like to save before quitting?", "Quit",
		            JOptionPane.YES_NO_OPTION,
		            JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
		        	// if yes save the game
		        	SaveLoadSystem.saveGame(Main.game);

		        	// exit the program
		        	System.exit(0);
		        } else {
		        	// exit the program
		        	System.exit(0);
		        }
		    }
		});

		Main.game.Tick(); // populate graphs

		frame.setVisible(true);
	}


	private static void addPopup(Component component, final JPopupMenu popup) {
		component.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if (e.isPopupTrigger()) {
					showMenu(e);
				}
			}
			public void mouseReleased(MouseEvent e) {
				if (e.isPopupTrigger()) {
					showMenu(e);
				}
			}
			private void showMenu(MouseEvent e) {
				popup.show(e.getComponent(), e.getX(), e.getY());
			}
		});


	}

	public static void main(String[] args) {
		new GamePage();
		showWindow();


	}
}

