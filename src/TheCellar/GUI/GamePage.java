package TheCellar.GUI;

import TheCellar.AI.AI;
import TheCellar.Business;
import TheCellar.Main;
import TheCellar.TickListener;
import TheCellar.Charts.BarGraph;
import TheCellar.Charts.LineGraph;
import TheCellar.Charts.PieChart;

import javax.swing.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.awt.event.KeyEvent;


// window builder class that creates the gui
// was mainly auto generated by eclipse
public class GamePage {
	public static JFrame frame;
	public boolean textListenerEnabled = true;

	public static void showWindow() {


	}

	public GamePage() {
		
		frame = new JFrame();
		frame.setTitle("The Cellar");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setBounds(100, 100, 1061, 500);
		frame.setLocationRelativeTo(null);
		frame.getContentPane().setLayout(null);

		//		JPanel Animation = new Animation();
		//		Animation.setBorder(new CompoundBorder());
		//		Animation.setBackground(new Color(248, 248, 248));
		//		Animation.setBounds(101, 11, 732, 312);
		//		frame.getContentPane().add(Animation);

		JSlider slider = new JSlider();
		slider.setBounds(14, 384, 151, 26);
		frame.getContentPane().add(slider);
		slider.addChangeListener(e -> {
			if (textListenerEnabled) {
				System.out.println("Slider value: " + slider.getValue());

				float percent = (100.0f - slider.getValue()) / 100.0f;
				int min = Main.game.GameSpeedMin;
				int max = Main.game.GameSpeedMax;
				int range = max - min;
				int value = (int) (min + range * percent);

				Main.game.SetGameSpeed(value);
			}
		});

		// set the slider value to the current game speed
		slider.setValue(100-((Main.game.GameSpeed - Main.game.GameSpeedMin) * 100 / (Main.game.GameSpeedMax - Main.game.GameSpeedMin)));

		JLabel timeLabel = new JLabel("Game Speed\r\n");
		timeLabel.setBounds(54, 369, 81, 14);
		frame.getContentPane().add(timeLabel);


		JLabel money = new JLabel("Money: ");
		money.setFont(new Font("SansSerif", Font.ITALIC, 18));
		money.setBounds(815, 8, 100, 38);
		frame.getContentPane().add(money);

		JLabel debt = new JLabel("Debt: ");
		debt.setFont(new Font("SansSerif", Font.ITALIC, 18));
		debt.setBounds(815, 25, 113, 38);
		frame.getContentPane().add(debt);

		JLabel moneyLabel = new JLabel(String.valueOf(Main.game.PlayerBusiness.money));
		moneyLabel.setBackground(new Color(192, 192, 192));
		moneyLabel.setFont(new Font("SansSerif", Font.ITALIC, 18));
		moneyLabel.setBounds(915, 8, 124, 38);
		frame.getContentPane().add(moneyLabel);

		JLabel debtLabel = new JLabel(String.valueOf(Main.game.PlayerBusiness.debt));
		debtLabel.setFont(new Font("SansSerif", Font.ITALIC, 18));
		debtLabel.setBounds(865, 25, 159, 38);
		frame.getContentPane().add(debtLabel);

		PieChart pieChart = new PieChart();
		pieChart.setBounds(175, 50, 218, 140);
		frame.getContentPane().add(pieChart);

		BarGraph steaksPerDayChart = new BarGraph("Steaks Per Day");
		steaksPerDayChart.setBounds(375, 331, 200, 122);
		frame.getContentPane().add(steaksPerDayChart);

		LineGraph lineGraph = new LineGraph("time", "Going Rate");
		lineGraph.setBounds(575, 331, 200, 122);
		frame.getContentPane().add(lineGraph);

		BarGraph barGraph = new BarGraph("value");
		barGraph.setBounds(175, 331, 200, 122);
		frame.getContentPane().add(barGraph);

		BarGraph demandGraph = new BarGraph("Demand");
		demandGraph.setBounds(175, 207, 200, 122);
		frame.getContentPane().add(demandGraph);

		ArrayList<Double> customerSentimentValues = new ArrayList<>();
		LineGraph CustomerSentimentGraph = new LineGraph("time", "Customer Sentiment");
		CustomerSentimentGraph.setBounds(375, 207, 200, 122);
		frame.getContentPane().add(CustomerSentimentGraph);

		ArrayList<Double> netWorthOverTime = new ArrayList<>();
		LineGraph MarketValueGraph = new LineGraph("time", "Net Worth");
		MarketValueGraph.setBounds(575, 207, 200, 122);
		frame.getContentPane().add(MarketValueGraph);

		ArrayList<Double> goingRateValues = new ArrayList<>();
		Main.game.addTickListener(new TickListener() {
			@Override
			public void onTick() {
				ArrayList<String> labels = new ArrayList<>();
				ArrayList<Double> netWorthValues = new ArrayList<>();
				ArrayList<Double> steaksPerDay = new ArrayList<>();
				ArrayList<Double> demandValues = new ArrayList<>();

				// add ai businesses
				for (int i = 0; i < Main.game.AIBusinesses.size(); i++) {
					Business b = Main.game.AIBusinesses.get(i);
					labels.add(b.name);

					double netWorth = (double)b.GetNetWorth();

					// make 0 if negative
					if (netWorth < 0) {
						netWorth = 0;
					}

					netWorthValues.add(netWorth);
					steaksPerDay.add((double)b.GetSteaksPerDay());
					demandValues.add(b.GetDemand());
				}

				// add player business
				labels.add(Main.game.PlayerBusiness.name);

				double netWorth = (double)Main.game.PlayerBusiness.GetNetWorth();

				if (netWorth < 0) {
					netWorth = 0;
				}

				netWorthValues.add(netWorth);
				steaksPerDay.add((double)Main.game.PlayerBusiness.GetSteaksPerDay());

				// add player value over times
				goingRateValues.add((double)Main.game.getGoingRate());
				demandValues.add(Main.game.PlayerBusiness.GetDemand());
				netWorthOverTime.add((double)Main.game.PlayerBusiness.GetNetWorth());
				customerSentimentValues.add(Main.game.PlayerBusiness.GetCustomerSatisfaction());

				// if more than 10 values, remove the first one
				if (goingRateValues.size() > 10) {
					goingRateValues.remove(0);
				}
				if (netWorthOverTime.size() > 10) {
					netWorthOverTime.remove(0);
				}
				if (customerSentimentValues.size() > 10) {
					customerSentimentValues.remove(0);
				}

				// update graphs

				// pie charts
				pieChart.Update(labels, netWorthValues);

				// bar graphs
				steaksPerDayChart.Update(labels, steaksPerDay);
				barGraph.Update(labels, netWorthValues);
				demandGraph.Update(labels, demandValues);

				// line graphs
				lineGraph.Update(goingRateValues);
				MarketValueGraph.Update(netWorthOverTime);
				CustomerSentimentGraph.Update(customerSentimentValues);

				moneyLabel.setText(String.valueOf(Main.game.PlayerBusiness.money));
		        debtLabel.setText(String.valueOf(Main.game.PlayerBusiness.debt));
			}
		});

		JPanel panel_1 = new JPanel();
		panel_1.setBackground(new Color(192, 192, 192));
		panel_1.setBounds(11, 9, 81, 311);
		frame.getContentPane().add(panel_1);
		panel_1.setLayout(null);

		JButton pauseButton = new JButton("Pause");
		pauseButton.setBounds(6, 5, 69, 45);
		panel_1.add(pauseButton);
		pauseButton.setFont(new Font("Arial", Font.BOLD, 12));
		pauseButton.setBackground(new Color(128, 128, 128));
		pauseButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				PauseMenuPage pause = new TheCellar.GUI.PauseMenuPage();	}
		});

		Button bankButton = new Button("Bank");
		bankButton.setBounds(6, 75, 69, 65);
		panel_1.add(bankButton);
		bankButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				TheCellar.GUI.BankPage bank = new BankPage();
				bank.showWindow();
			}
		});
		bankButton.setFont(new Font("SansSerif", Font.BOLD, 18));
		bankButton.setBackground(new Color(248, 242, 22));

		Button shopButton = new Button("Shop");
		shopButton.setBounds(7, 154, 69, 65);
		panel_1.add(shopButton);
		shopButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				TheCellar.GUI.ShopPage shop = new ShopPage();
				shop.showWindow();
			}
		});
		shopButton.setFont(new Font("SansSerif", Font.BOLD, 18));
		shopButton.setBackground(new Color(0, 255, 255));



		Button hireButton = new Button("Hire");
		hireButton.setBounds(6, 236, 69, 65);
		panel_1.add(hireButton);
		hireButton.setFont(new Font("SansSerif", Font.BOLD, 18));
		hireButton.setBackground(new Color(255, 0, 255));
		hireButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				TheCellar.GUI.HirePage chefs = new HirePage();
				chefs.showWindow();	
			}
		});

		JButton setSteakPriceButton = new JButton("Set Steak Price");
		setSteakPriceButton.setBounds(14, 410, 150, 30); 
		frame.getContentPane().add(setSteakPriceButton);
		
		JTextPane InventoryPane = new JTextPane();
		InventoryPane.setFont(new Font("Tahoma", Font.PLAIN, 11));
		InventoryPane.setText("Stuff\r\nhere\r\noh");
		InventoryPane.setBounds(815, 123, 224, 332);
		frame.getContentPane().add(InventoryPane);


		// add tick listener to update the inventory pane
		Main.game.addTickListener(new TickListener() {
			@Override
			public void onTick() {
				InventoryPane.setText(Main.game.PlayerBusiness.GetInventory());
			}
		});

		setSteakPriceButton.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        // Show an input dialog to get the steak price from the user
		        String userInput = JOptionPane.showInputDialog(frame, "Enter the new steak price:");
		        try {
		            if (userInput != null) {
		                int newPrice = Integer.parseInt(userInput);
		                // Set the price of the steak in the PlayerBusiness
		                Main.game.PlayerBusiness.setPrice(newPrice);
		                
		                // Display a message indicating the new steak price
		                JOptionPane.showMessageDialog(frame, "Steak price changed to: " + newPrice);
		            }
		        } catch (NumberFormatException ex) {
		            // Handle the case where the entered text is not a valid integer
		            JOptionPane.showMessageDialog(frame, "Please enter a valid integer for the price.");
		        }
		    }
		});
		//Animation.requestFocusInWindow();

		frame.setFocusable(true);

		InputMap inputMap = frame.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		ActionMap actionMap = frame.getRootPane().getActionMap();

		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "pauseMenu");
		actionMap.put("pauseMenu", new AbstractAction() {

			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				PauseMenuPage pause = new PauseMenuPage();
				pause.showWindow();
			}
		});


		JLabel DebtWarningLabel = new JLabel("You've been in debt for _ days you will lose in _ days");
		DebtWarningLabel.setForeground(new Color(255, 0, 0));
		DebtWarningLabel.setFont(new Font("Tahoma", Font.BOLD, 15));
		DebtWarningLabel.setBounds(176, 20, 407, 21);
		frame.getContentPane().add(DebtWarningLabel);

		JButton DebtPaymentButton = new JButton("Pay Debt!");
		DebtPaymentButton.setForeground(new Color(255, 0, 0));
		DebtPaymentButton.setFont(new Font("Tahoma", Font.BOLD, 15));
		DebtPaymentButton.setBounds(624, 15, 124, 26);
		frame.getContentPane().add(DebtPaymentButton);

		// add action listener to the debt payment button
		DebtPaymentButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// pay the debt
				boolean paidOff = Main.game.PlayerBusiness.PayDebt();

				// if not paid off show a message
				if (!paidOff) {
					JOptionPane.showMessageDialog(frame, "You don't have enough money to pay off your debt");
				}
			}
		});

		Main.game.addTickListener(new TickListener() {
			public void onTick() {
				moneyLabel.setText(String.valueOf(Main.game.PlayerBusiness.money));

				// if the player is in debt
				if (Main.game.PlayerBusiness.debt > 0) {
					// show the debt warning label
					DebtWarningLabel.setVisible(true);
					DebtWarningLabel.setText("You've been in debt for " + Main.game.PlayerBusiness.daysInDebt + " days you will lose in " + (7-Main.game.PlayerBusiness.daysInDebt) + " days");

					// show the debt payment button
					DebtPaymentButton.setVisible(true);

				} else {
					// hide the debt warning label
					DebtWarningLabel.setVisible(false);

					// hide the debt payment button
					DebtPaymentButton.setVisible(false);
				}

				// if the player has lost
				if (Main.game.PlayerBusiness.daysInDebt > 7) {

					// set game over
					Main.game.GameOver();

					// show the game over page
					frame.setVisible(false);
					GameOverPage gameOver = new GameOverPage();

				}
			}
		});


		frame.setVisible(true);
	}


	private static void addPopup(Component component, final JPopupMenu popup) {
		component.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if (e.isPopupTrigger()) {
					showMenu(e);
				}
			}
			public void mouseReleased(MouseEvent e) {
				if (e.isPopupTrigger()) {
					showMenu(e);
				}
			}
			private void showMenu(MouseEvent e) {
				popup.show(e.getComponent(), e.getX(), e.getY());
			}
		});


	}

	public static void main(String[] args) {
		new GamePage();
		showWindow();


	}
}

